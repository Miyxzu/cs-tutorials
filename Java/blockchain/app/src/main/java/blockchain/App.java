/*
 * This source file was generated by the Gradle 'init' task
 */
package blockchain;

import java.security.Security;
import java.util.*;
// import com.google.gson.*;

public class App {

    public static ArrayList<Block> blockchain = new ArrayList<Block>();
    public static HashMap<String, TransactionOutput> UTXOs = new HashMap<String, TransactionOutput>();

    public static int diff = 3;
    public static float minTransaction = 0.1f;

    public static Wallet walletA;
    public static Wallet walletB;
    public static Transaction genesisTransaction;

    public static void main(String[] args) {
		//add our blocks to the blockchain ArrayList:
		Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider()); //Setup Bouncey castle as a Security Provider
		
		//Create wallets:
		walletA = new Wallet();
		walletB = new Wallet();		
		Wallet coinbase = new Wallet();
		
		//create genesis transaction, which sends 100 NoobCoin to walletA: 
		genesisTransaction = new Transaction(coinbase.pubKey, walletA.pubKey, 100f, null);
		genesisTransaction.genSig(coinbase.privKey);	 //manually sign the genesis transaction	
		genesisTransaction.transactionID = "0"; //manually set the transaction id
		genesisTransaction.outputs.add(new TransactionOutput(genesisTransaction.reciepient, genesisTransaction.val, genesisTransaction.transactionID)); //manually add the Transactions Output
		UTXOs.put(genesisTransaction.outputs.get(0).id, genesisTransaction.outputs.get(0)); //its important to store our first transaction in the UTXOs list.
		
		System.out.println("Creating and Mining Genesis block... ");
		Block genesis = new Block("0");
		genesis.addTransaction(genesisTransaction);
		addBlock(genesis);
		
		//testing
		Block block1 = new Block(genesis.hash);
		System.out.println("\nWallet A's balance is: " + walletA.getBalance());
		System.out.println("\nWallet A is Attempting to send funds (40) to WalletB...");
		block1.addTransaction(walletA.sendFunds(walletB.pubKey, 40f));
		addBlock(block1);
		System.out.println("\nWallet A's balance is: " + walletA.getBalance());
		System.out.println("Wallet B's balance is: " + walletB.getBalance());
		
		Block block2 = new Block(block1.hash);
		System.out.println("\nWallet A Attempting to send more funds (1000) than it has...");
		block2.addTransaction(walletA.sendFunds(walletB.pubKey, 1000f));
		addBlock(block2);
		System.out.println("\nWallet A's balance is: " + walletA.getBalance());
		System.out.println("Wallet B's balance is: " + walletB.getBalance());
		
		Block block3 = new Block(block2.hash);
		System.out.println("\nWallet B is Attempting to send funds (20) to WalletA...");
		block3.addTransaction(walletB.sendFunds( walletA.pubKey, 20f));
		System.out.println("\nWallet A's balance is: " + walletA.getBalance());
		System.out.println("Wallet B's balance is: " + walletB.getBalance());
		
		isChainValid();
    }

    public static Boolean isChainValid() {
        Block currentBlock;
        Block previousBlock;
        String hashTarget = new String(new char[diff]).replace('\0', '0');
        HashMap<String, TransactionOutput> tempUTXOs = new HashMap<>();
        tempUTXOs.put(genesisTransaction.outputs.get(0).id, genesisTransaction.outputs.get(0));

        for (int i = 1; i < blockchain.size(); i++) {
            currentBlock = blockchain.get(i);
            previousBlock = blockchain.get(i - 1);

            if(!currentBlock.hash.equals(currentBlock.calcHashString())) {
                System.out.println("Current hashes not found");
                return false;
            }

            if(!previousBlock.hash.equals(currentBlock.previousHash)){
                System.out.println("Previous hashes not equal");
                return false;
            }

            if(!currentBlock.hash.substring(0, diff).equals(hashTarget)) {
                System.out.println("This block hasn't been mined");
                return false;
            }

            TransactionOutput tempOutput;
			for(int t = 0; t < currentBlock.transactions.size(); t++) {
				Transaction currentTransaction = currentBlock.transactions.get(t);
				
				if(!currentTransaction.verifySig()) {
					System.out.println("// Signature on Transaction(" + t + ") is Invalid");
					return false; 
				}
				if(currentTransaction.getInputValue() != currentTransaction.getOutputValue()) {
					System.out.println("// Inputs are note equal to outputs on Transaction(" + t + ")");
					return false; 
				}
				
				for(TransactionInput input: currentTransaction.inputs) {	
					tempOutput = tempUTXOs.get(input.transactionOutputID);
					
					if(tempOutput == null) {
						System.out.println("// Referenced input on Transaction(" + t + ") is Missing");
						return false;
					}
					
					if(input.UTXO.val != tempOutput.val) {
						System.out.println("// Referenced input Transaction(" + t + ") value is Invalid");
						return false;
					}
					
					tempUTXOs.remove(input.transactionOutputID);
				}
				
				for(TransactionOutput output: currentTransaction.outputs) {
					tempUTXOs.put(output.id, output);
				}
				
				if( currentTransaction.outputs.get(0).reciepient != currentTransaction.reciepient) {
					System.out.println("// Transaction(" + t + ") output reciepient is not who it should be");
					return false;
				}
				if( currentTransaction.outputs.get(1).reciepient != currentTransaction.sender) {
					System.out.println("// Transaction(" + t + ") output 'change' is not sender.");
					return false;
				}
				
			}
        }
        return true;
    }

    public static void addBlock(Block newBlock) {
        newBlock.mineBlock(diff);
        blockchain.add(newBlock);
    }
}
